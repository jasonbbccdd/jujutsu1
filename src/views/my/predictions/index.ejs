<%- contentFor('styles') %>
<%- contentFor('scripts') %>
<script>
const generateTitle = () => {
  return '<h1 class="text-center mb-3">My Predictions</h1>'
}

const generateFilter = ({ queries: { q, orderBy, sortBy } = {} } = {}) => {
  return `
    <form id="filter" class="row row-cols-lg-auto g-3 justify-content-center align-items-center mb-3">
      <div class="col-12">
        <div class="input-group">
          <div class="input-group-text">Search</div>
          <input class="form-control" placeholder="Content" name="q" type="text" value="${q || ''}">
        </div>
      </div>

      <div class="col-12">
        <div class="input-group">
          <div class="input-group-text">Filter By</div>
          <select class="form-select" name="orderBy" value="${orderBy || ''}">
            <option ${orderBy === 'id' ? 'selected' : ''} value="id">ID</option>
            <option ${orderBy === 'createdAt' ? 'selected' : ''} value="createdAt">Created At</option>
            <option ${orderBy === 'title' ? 'selected' : ''} value="title">Title</option>
            <option ${orderBy === 'description' ? 'selected' : ''} value="description">Description</option>
          </select>
        </div>
      </div>

      <div class="col-12">
        <div class="input-group">
          <div class="input-group-text">Sort By</div>
          <select class="form-select" name="sortBy">
            <option ${sortBy === 'asc' ? 'selected' : ''} value="asc">Ascending</option>
            <option ${sortBy === 'desc' ? 'selected' : ''} value="desc">Descending</option>
          </select>
        </div>
      </div>

      <div class="col-12">
        <button class="btn btn-primary" type="submit" >Submit</button>
      </div>

      <div class="col-12">
        <button id="reset-form" class="btn btn-danger" type="reset">Reset</button>
      </div>
    </form>
  `
}

const generatePagination = (isLoading, { currentPage, totalPages } = {}) => {
  if (isLoading || !totalPages || totalPages <= 1) return ''

  let links = ''

  if (totalPages > 2 && currentPage > 1) links += `<li class="page-item"><a class="page-link" href="#" data-page="1">First</a></li>`
  if (currentPage - 1 >= 1) links += `<li class="page-item"><a class="page-link" href="#" data-page="${currentPage - 1}">Prev</a></li>`
  if (currentPage - 2 >= 1) links += `<li class="page-item"><a class="page-link" href="#" data-page="${currentPage - 2}">${currentPage - 2}</a></li>`
  if (currentPage - 1 >= 1) links += `<li class="page-item"><a class="page-link" href="#" data-page="${currentPage - 1}">${currentPage - 1}</a></li>`

  links += `<li class="page-item active"><a class="page-link">${currentPage}</a></li>`

  if (currentPage + 1 <= totalPages) links += `<li class="page-item"><a class="page-link" href="#" data-page="${currentPage + 1}">${currentPage + 1}</a></li>`
  if (currentPage + 2 <= totalPages) links += `<li class="page-item"><a class="page-link" href="#" data-page="${currentPage + 2}">${currentPage + 2}</a></li>`
  if (currentPage + 1 <= totalPages) links += `<li class="page-item"><a class="page-link" href="#" data-page="${currentPage + 1}">Next</a></li>`
  if (totalPages > 2 && currentPage < totalPages) links += `<li class="page-item"><a class="page-link" href="#" data-page="${totalPages}">Last</a></li>`

  return `
    <ul class="pagination justify-content-center mt-3">
      ${links}
    </ul>
  `
}

const generatePrediction = (prediction) => {
  return `
      <div class="col">
        <a class="card text-body" href="/my/predictions/${prediction.id}" style="text-decoration: none;">
          <div class="card-body text-center">
            <img class="mb-2" src="${prediction.user.avatar}" alt="user avatar" width="150" />
            <h5 class="card-title mb-2">${prediction.title}</h5>
            <p class="card-text mb-2">${prediction.description}</p>
          </div>
        </a>
      </div>
  `
}

const generatePredictions = ({ isLoading, predictions = [] } = {}) => {
  if (isLoading) return `<div class="text-center mb-3">Loading...</div>`
  if (predictions.length === 0) {
    return `
      <h2 class="text-center mb-3">No Prediction Found!</h2>
      <div class="text-center">
        <a class="btn btn-primary" href="/my/predictions/new">Create New Prediction!</a>
      </div>
    `
  }

  return `
    <div class="row">
      <div class="col-12 col-md-10 offset-md-1 col-lg-8 offset-lg-2">
        <div id="predictions-list" class="row row-cols-1 g-3">
          ${predictions.map(generatePrediction).join('')}
        </div>
      </div>
    </div>
  `
}

const generatePage = (info) => {
  const $page = $('#pages-my-predictions-index')
  const $title = generateTitle(info)
  const $filter = generateFilter(info)
  const $predictions = generatePredictions(info)
  const $pagination = generatePagination(info)

  $page.html('').append($title).append($filter).append($predictions).append($pagination)
}

$(document).ready(() => {
  generatePage({ isLoading: true })

  axios({
    method: 'GET',
    url: '/api/my/predictions'
  }).then((resp) => {
    generatePage({ predictions: resp.data.predictions, meta: resp.data.meta })
  })

// On Filter Submit
  $('#pages-my-predictions-index').on('submit', '#filter', (e) => {
    e.preventDefault()

    const queries = parseFormData(new FormData(e.target))
    generatePage({ isLoading: true, queries })

    axios({
      method: 'GET',
      url: '/api/my/predictions',
      params: queries
    }).then((resp) => {
      generatePage({ Predictions: resp.data.predictions, meta: resp.data.meta, queries })
    })
  })

  // On Filter Reset
  $('#pages-my-predictions-index').on('click', '#filter #reset-form', (e) => {
    generatePage({ isLoading: true })

    axios({
      method: 'GET',
      url: `/api/my/predictions`
    }).then((resp) => {
      generatePage({ predictions: resp.data.predictions, meta: resp.data.meta })
    })
  })

  // On Page Link Click
  $('#pages-my-predictions-index').on('click', '.page-link', (e) => {
    e.preventDefault()

    const queries = parseFormData(new FormData($('#filter')[0]))
    const page = $(e.target).data('page')
    generatePage({ isLoading: true, queries })

    axios({
      method: 'GET',
      url: '/api/my/predictions',
      params: {
        ...queries,
        page
      }
    }).then((resp) => {
      generatePage({ predictions: resp.data.predictions, meta: resp.data.meta, queries })
    })
  })
})
</script>

<%- contentFor('body') %>
<div id="pages-my-predictions-index" class="container"></div>
